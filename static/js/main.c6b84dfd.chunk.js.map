{"version":3,"sources":["Components/SeasonDisplay.js","App.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","console","log","className","App","state","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","lon","longitude","err","message","this","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wKAGMA,EAAe,CACnBC,OAAQ,CAAEC,KAAM,sBAAuBC,SAAU,OACjDC,OAAQ,CAAEF,KAAM,kBAAmBC,SAAU,cA6BhCE,EAfO,SAACC,GACrB,IAViBC,EAAKC,EAUhBC,GAVWF,EAUQD,EAAMC,KAVTC,GAUc,IAAIE,MAAOC,YATnC,GAAKH,EAAQ,EAChBD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAO9BK,QAAQC,IAAI,UAAWJ,GAFQ,MAIJT,EAAaS,GAAhCP,EAJuB,EAIvBA,KAAMC,EAJiB,EAIjBA,SAEd,OACE,6BACE,uBAAGW,UAAS,eAAUX,KACtB,4BAAKD,GACL,uBAAGY,UAAS,eAAUX,OCiBbY,E,4MA1CbC,MAAQ,CAAET,IAAK,KAAMU,aAAc,I,kEAGd,IAAD,OAClBL,QAAQC,IACN,sLAGFK,OAAOC,UAAUC,YAAYC,oBAC3B,SAACC,GAAD,OACE,EAAKC,SAAS,CACZhB,IAAKe,EAASE,OAAOC,SACrBC,IAAKJ,EAASE,OAAOG,eAEzB,SAACC,GACC,EAAKL,SAAS,CAAEN,aAAcW,EAAIC,e,2CAOtCjB,QAAQC,IAAI,0B,+BAIZ,OAAIiB,KAAKd,MAAMC,eAAiBa,KAAKd,MAAMT,IAClC,uCAAauB,KAAKd,MAAMC,eAG5Ba,KAAKd,MAAMC,cAAgBa,KAAKd,MAAMT,IAEvC,6BACE,kBAAC,EAAD,CAAeA,IAAKuB,KAAKd,MAAMT,OAK9B,+C,GAvCOwB,IAAMC,WCCxBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.c6b84dfd.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n// Set up an object with all options: info for summer and winter.\r\nconst seasonConfig = {\r\n  summer: { text: \"Let's hit the beach\", iconName: \"sun\" },\r\n  winter: { text: \"Brrr it's cold!\", iconName: \"snowflake\" },\r\n};\r\n\r\n// Fx: Based on month & latitude, determine the user's season.\r\n// Returns \"summer\" or \"winter\"\r\nconst getSeason = (lat, month) => {\r\n  if (month > 2 && month < 9) {\r\n    return lat > 0 ? \"summer\" : \"winter\";\r\n  } else {\r\n    return lat > 0 ? \"winter\" : \"summer\";\r\n  }\r\n};\r\n\r\n// Fx: Takes two args - lat & month.  Takes run get season fx to determine season\r\nconst SeasonDisplay = (props) => {\r\n  const season = getSeason(props.lat, new Date().getMonth());\r\n  console.log(\"season \", season);\r\n  // Find the object info for that season.  Pick out text & iconName so I can use it in render\r\n  const { text, iconName } = seasonConfig[season];\r\n\r\n  return (\r\n    <div>\r\n      <i className={`icon ${iconName}`} />\r\n      <h1>{text}</h1>\r\n      <i className={`icon ${iconName}`} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SeasonDisplay;\r\n","import React from \"react\";\nimport SeasonDisplay from \"./Components/SeasonDisplay\";\n\nclass App extends React.Component {\n  state = { lat: null, errorMessage: \"\" };\n\n  // this only gets invoked once\n  componentDidMount() {\n    console.log(\n      \"Data loading i.e. making network request to api, getting geolocation.  It is recommended to do data loading in 'componentDidMount' method.  That way, data loading is centralized.\"\n    );\n\n    window.navigator.geolocation.getCurrentPosition(\n      (position) =>\n        this.setState({\n          lat: position.coords.latitude,\n          lon: position.coords.longitude,\n        }),\n      (err) => {\n        this.setState({ errorMessage: err.message });\n      }\n    );\n  }\n\n  // called every time a component is updated.  i.e. if the state changes or component receives new props from parent.\n  componentDidUpdate() {\n    console.log(\"Component Did Update\");\n  }\n\n  render() {\n    if (this.state.errorMessage && !this.state.lat) {\n      return <div>Error: {this.state.errorMessage}</div>;\n    }\n\n    if (!this.state.errorMessage && this.state.lat) {\n      return (\n        <div>\n          <SeasonDisplay lat={this.state.lat} />\n        </div>\n      );\n    }\n\n    return <div>Loading...</div>;\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}