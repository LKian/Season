{"version":3,"sources":["Components/SeasonDisplay.js","Components/Spinner.js","App.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","class","Spinner","App","state","errorMessage","console","log","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","toFixed","err","message","this","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6LAIMA,G,MAAe,CACnBC,OAAQ,CAAEC,KAAM,eAAgBC,SAAU,OAC1CC,OAAQ,CAAEF,KAAM,mBAAoBC,SAAU,eAmCjCE,EArBO,SAACC,GACrB,IAViBC,EAAKC,EAUhBC,GAVWF,EAUQD,EAAMC,KAVTC,GAUc,IAAIE,MAAOC,YATnC,GAAKH,EAAQ,EAChBD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAKC,EAIJP,EAAaS,GAAhCP,EAJuB,EAIvBA,KAAMC,EAJiB,EAIjBA,SAEd,OACE,yBAAKS,UAAS,iDAA4CH,IACxD,yBAAKI,MAAM,yBAAX,qBAAsDP,EAAMC,KAC5D,yBAAKM,MAAM,kBACT,4BAAKJ,IAEP,yBAAKG,UAAU,iBACb,uBAAGA,UAAS,8BAAyBT,KACrC,wBAAIS,UAAU,oBAAoBV,GAClC,uBAAGU,UAAS,8BAAyBT,QCzB9BW,EARC,WACd,OACE,yBAAKD,MAAM,oBACT,yBAAKA,MAAM,sBAAX,aCyCSE,E,4MAzCbC,MAAQ,CAAET,IAAK,KAAMU,aAAc,I,kEAGd,IAAD,OAClBC,QAAQC,IACN,wNAGFC,OAAOC,UAAUC,YAAYC,oBAC3B,SAACC,GAAD,OACE,EAAKC,SAAS,CACZlB,IAAKiB,EAASE,OAAOC,SAASC,QAAQ,QAE1C,SAACC,GACC,EAAKJ,SAAS,CAAER,aAAcY,EAAIC,e,2CAOtCZ,QAAQC,IAAI,0B,+BAIZ,OAAIY,KAAKf,MAAMC,eAAiBc,KAAKf,MAAMT,IAClC,uCAAawB,KAAKf,MAAMC,eAG5Bc,KAAKf,MAAMC,cAAgBc,KAAKf,MAAMT,IAEvC,yBAAKM,MAAM,kBACT,kBAAC,EAAD,CAAeN,IAAKwB,KAAKf,MAAMT,OAK9B,kBAAC,EAAD,U,GAtCOyB,IAAMC,WCAxBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.23b64c35.chunk.js","sourcesContent":["import \"./Season.css\";\r\nimport React from \"react\";\r\n\r\n// Set up an object with all options: info for summer and winter.\r\nconst seasonConfig = {\r\n  summer: { text: \"To the beach\", iconName: \"sun\" },\r\n  winter: { text: \"Brrr, it's cold!\", iconName: \"snowflake\" },\r\n};\r\n\r\n// Fx: Based on month & latitude, determine the user's season.\r\n// Returns \"summer\" or \"winter\"\r\nconst getSeason = (lat, month) => {\r\n  if (month > 2 && month < 9) {\r\n    return lat > 0 ? \"summer\" : \"winter\";\r\n  } else {\r\n    return lat > 0 ? \"winter\" : \"summer\";\r\n  }\r\n};\r\n\r\n// Fx: Takes two args - lat & month.  Takes run get season fx to determine season\r\nconst SeasonDisplay = (props) => {\r\n  const season = getSeason(props.lat, new Date().getMonth());\r\n\r\n  // Find the object info for that season.  Pick out text & iconName so I can use it in render\r\n  const { text, iconName } = seasonConfig[season];\r\n\r\n  return (\r\n    <div className={`ui raised centered card season-display ${season}`}>\r\n      <div class=\"ui top attached label\">Current Latitude: {props.lat}</div>\r\n      <div class=\"weather-season\">\r\n        <h2>{season}</h2>\r\n      </div>\r\n      <div className=\"weather-alert\">\r\n        <i className={`icon icon-right big ${iconName}`} />\r\n        <h3 className=\"weather-activity\">{text}</h3>\r\n        <i className={`icon icon-right big ${iconName}`} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SeasonDisplay;\r\n","import React from \"react\";\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div class=\"ui active dimmer\">\r\n      <div class=\"ui big text loader\">Loading</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import React from \"react\";\r\nimport SeasonDisplay from \"./Components/SeasonDisplay\";\r\nimport Spinner from \"./Components/Spinner\";\r\n\r\nclass App extends React.Component {\r\n  state = { lat: null, errorMessage: \"\" };\r\n\r\n  // this only gets invoked once\r\n  componentDidMount() {\r\n    console.log(\r\n      \"COMPONENT DID MOUNT: Data loading happens here i.e. making network request to api, getting geolocation.  It is recommended to do data loading in 'componentDidMount' method.  That way, data loading is centralized.\"\r\n    );\r\n\r\n    window.navigator.geolocation.getCurrentPosition(\r\n      (position) =>\r\n        this.setState({\r\n          lat: position.coords.latitude.toFixed(2),\r\n        }),\r\n      (err) => {\r\n        this.setState({ errorMessage: err.message });\r\n      }\r\n    );\r\n  }\r\n\r\n  // called every time a component is updated.  i.e. if the state changes or component receives new props from parent.\r\n  componentDidUpdate() {\r\n    console.log(\"Component Did Update\");\r\n  }\r\n\r\n  render() {\r\n    if (this.state.errorMessage && !this.state.lat) {\r\n      return <div>Error: {this.state.errorMessage}</div>;\r\n    }\r\n\r\n    if (!this.state.errorMessage && this.state.lat) {\r\n      return (\r\n        <div class=\"card-container\">\r\n          <SeasonDisplay lat={this.state.lat} />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return <Spinner />;\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}